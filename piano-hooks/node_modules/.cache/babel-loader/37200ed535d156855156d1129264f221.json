{"ast":null,"code":"var _jsxFileName = \"/Users/kaycistone/Desktop/react-project/ReactProject/piano-hooks/src/Instrument.js\",\n    _s = $RefreshSig$();\n\nimport React, { Fragment, useState, useEffect } from \"react\";\nimport isAccidentalNote from \"./utils/isAccidentalNote\";\nimport { getKeyboardShortcutsForNote } from \"./utils/getKeyboardShortcutsForNote\";\nimport InstrumentAudio from \"./piano/src/Keyboard/InstrumentAudio\";\nimport getNotesBetween from \"./utils/getNotesBetween\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst isRegularKey = event => {\n  return !event.ctrlKey && !event.metaKey && !event.shiftKey;\n};\n\nconst Instrument = ({\n  instrumentName,\n  startNote,\n  endNote,\n  renderPianoKey,\n  keyboardMap\n}) => {\n  _s();\n\n  const notes = getNotesBetween(startNote, endNote);\n  const [state, setState] = useState({\n    notesPlaying: []\n  });\n  useEffect(() => {\n    window.addEventListener(\"keydown\", handleKeyDown);\n    window.addEventListener(\"keyup\", handleKeyUp);\n  }, []);\n\n  const getNoteFromKeyboardKey = keyboardKey => {\n    return keyboardMap[keyboardKey.toUpperCase()];\n  };\n\n  const handleKeyDown = e => {\n    if (isRegularKey(e) && !e.repeat) {\n      const note = getNoteFromKeyboardKey(e.key);\n\n      if (note) {\n        setState({ ...state,\n          notesPlaying: [...state.notesPlaying, note]\n        });\n      }\n    }\n  };\n\n  const handleKeyUp = e => {\n    if (isRegularKey(e) && !e.repeat) {\n      const note = getNoteFromKeyboardKey(e.key);\n\n      if (note) {\n        setState({ ...state,\n          notesPlaying: state.notesPlaying.filter(notePlaying => notePlaying !== note)\n        });\n      }\n    }\n  };\n\n  const onPlayNoteStart = note => {\n    setState({ ...state,\n      notesPlaying: [...state.notesPlaying, note]\n    });\n  };\n\n  const onPlayNoteEnd = note => {\n    setState({ ...state,\n      notesPlaying: state.notesPlaying.filter(notePlaying => notePlaying !== note)\n    });\n  }; //rendering piano keys\n\n\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [notes.map(note => {\n      return /*#__PURE__*/_jsxDEV(Fragment, {\n        children: renderPianoKey({\n          note,\n          isAccidentalNote: isAccidentalNote(note),\n          isNotePlaying: state.notesPlaying.includes(note),\n          startPlayingNote: () => onPlayNoteStart(note),\n          stopPlayingNote: () => onPlayNoteEnd(note),\n          keyboardShortcut: getKeyboardShortcutsForNote(keyboardMap, note)\n        })\n      }, note, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 11\n      }, this);\n    }), /*#__PURE__*/_jsxDEV(InstrumentAudio, {\n      instrumentName: instrumentName,\n      notes: state.notesPlaying\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Instrument, \"fCAU6i5GSHXqoh4XdiM3eBsl8gE=\");\n\n_c = Instrument;\nexport default Instrument;\n\nvar _c;\n\n$RefreshReg$(_c, \"Instrument\");","map":{"version":3,"sources":["/Users/kaycistone/Desktop/react-project/ReactProject/piano-hooks/src/Instrument.js"],"names":["React","Fragment","useState","useEffect","isAccidentalNote","getKeyboardShortcutsForNote","InstrumentAudio","getNotesBetween","isRegularKey","event","ctrlKey","metaKey","shiftKey","Instrument","instrumentName","startNote","endNote","renderPianoKey","keyboardMap","notes","state","setState","notesPlaying","window","addEventListener","handleKeyDown","handleKeyUp","getNoteFromKeyboardKey","keyboardKey","toUpperCase","e","repeat","note","key","filter","notePlaying","onPlayNoteStart","onPlayNoteEnd","map","isNotePlaying","includes","startPlayingNote","stopPlayingNote","keyboardShortcut"],"mappings":"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","sourcesContent":["import React, { Fragment, useState, useEffect } from \"react\";\nimport isAccidentalNote from \"./utils/isAccidentalNote\";\nimport { getKeyboardShortcutsForNote } from \"./utils/getKeyboardShortcutsForNote\";\nimport InstrumentAudio from \"./piano/src/Keyboard/InstrumentAudio\";\nimport getNotesBetween from \"./utils/getNotesBetween\";\n\nconst isRegularKey = event => {\n  return !event.ctrlKey && !event.metaKey && !event.shiftKey;\n};\nconst Instrument = ({\n  instrumentName,\n  startNote,\n  endNote,\n  renderPianoKey,\n  keyboardMap\n}) => {\n  const notes = getNotesBetween(startNote, endNote);\n\n  const [state, setState] = useState({\n    notesPlaying: []\n  });\n\n  useEffect(() => {\n    window.addEventListener(\"keydown\", handleKeyDown);\n    window.addEventListener(\"keyup\", handleKeyUp);\n  }, []);\n\n  const getNoteFromKeyboardKey = keyboardKey => {\n    return keyboardMap[keyboardKey.toUpperCase()];\n  };\n\n  const handleKeyDown = e => {\n    if (isRegularKey(e) && !e.repeat) {\n      const note = getNoteFromKeyboardKey(e.key);\n      if (note) {\n        setState({ ...state, notesPlaying: [...state.notesPlaying, note] });\n      }\n    }\n  };\n\n  const handleKeyUp = e => {\n    if (isRegularKey(e) && !e.repeat) {\n      const note = getNoteFromKeyboardKey(e.key);\n      if (note) {\n        setState({\n          ...state,\n          notesPlaying: state.notesPlaying.filter(\n            notePlaying => notePlaying !== note\n          )\n        });\n      }\n    }\n  };\n\n  const onPlayNoteStart = note => {\n    setState({ ...state, notesPlaying: [...state.notesPlaying, note] });\n  };\n\n  const onPlayNoteEnd = note => {\n    setState({\n      ...state,\n      notesPlaying: state.notesPlaying.filter(\n        notePlaying => notePlaying !== note\n      )\n    });\n  };\n\n  //rendering piano keys\n  return (\n    <Fragment>\n      {notes.map(note => {\n        return (\n          <Fragment key={note}>\n            {renderPianoKey({\n              note,\n              isAccidentalNote: isAccidentalNote(note),\n              isNotePlaying: state.notesPlaying.includes(note),\n              startPlayingNote: () => onPlayNoteStart(note),\n              stopPlayingNote: () => onPlayNoteEnd(note),\n              keyboardShortcut: getKeyboardShortcutsForNote(keyboardMap, note)\n            })}\n          </Fragment>\n        );\n      })}\n\n      <InstrumentAudio\n        instrumentName={instrumentName}\n        notes={state.notesPlaying}\n      />\n    </Fragment>\n  );\n};\n\nexport default Instrument;\n"]},"metadata":{},"sourceType":"module"}